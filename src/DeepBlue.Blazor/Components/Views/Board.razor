
@page "/views/board"

@attribute [Route(Shared.Routes.Blazor.Views.BoardView)]

<!-- NOTE: CSS isolation does not work, so using inline -->
<style>

  div.color-white {
    height: 100px;
    width: 100px;
    background-color: #FFFFFF;
  }

  div.color-black {
    height: 100px;
    width: 100px;
    background-color: #B475C2;
  }

  div.board-grid {
    height: 800px;
    width: 800px;
    box-sizing: border-box;
    border: 1px solid #000;
    margin: 0 auto;
  }

  div.board-row {
    height: 100px;
    width: 800px;
    display: flex;
  }

  button.chess-piece {
    height: 95%;
    width: 95%;

    background: none;
    border: none;
  }

  button.chess-piece>img {
    height: 95%;
    width: 95%;
  }

</style>

<div id="board-gird">
  @for (int y = 0; y < BoardDimensions.Y; ++y)
  {
    <div id="row-@y" class="board-row">
      @for (int x = 0; x < BoardDimensions.X; ++x)
      {
        <div id="column-@x" class="board-column @GetCellColor(x, y)">
          @if (BoardPieces.ElementAt(y).ElementAt(x) is not EmptyPiece)
          {
            <button class=chess-piece @onclick="() => ReadyMove(x,y)">
              <img src="img/pieces/@GetPieceGraphic(x, y)" />
            </button>
          }
        </div>
      }
    </div>
  }
</div>

@code {

  IEnumerable<IEnumerable<PieceBase>> BoardPieces = Array.Empty<IEnumerable<PieceBase>>();
  (int X, int Y) BoardDimensions = (8, 8);

  [Parameter]
  public required Sets Set { get; set; }

  //NOTE: FEN meaning:                           Board state,whos move,castiling,En passant, Halfmove clock,Fullmove number
  private readonly string _defaultBoardLayout = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

  protected override async Task OnInitializedAsync()
  {
    BoardPieces = BoardHelpers.FENToBoard(_defaultBoardLayout, Set);

    PawnPiece pawn = new PawnPiece(Set);
    Move t = pawn.Moves;

    StateHasChanged();
  }

  void ReadyMove(int x, int y)
  {
    throw new NotImplementedException();
  }

  string GetPieceGraphic(int x, int y)
  {
    PieceBase piece = BoardPieces.ElementAt(y).ElementAt(x);
    return BoardHelpers.GetPieceString(piece);
  }

  string GetCellColor(int x, int y)
  {
    //NOTE: all even (index based) cells must be white, all un-even must be black
    return (x + y) % 2 == 0 ? "color-white" : "color-black";
  }
}