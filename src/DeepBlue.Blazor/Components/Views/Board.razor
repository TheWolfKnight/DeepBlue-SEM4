
@page "/views/board"

@attribute [Route(Shared.Routes.Blazor.Views.BoardView)]

<!-- NOTE: CSS isolation does not work, so using inline -->
<style>

  div.color-white {
    height: 100px;
    width: 100px;
    background-color: #fff;
  }

  div.color-black {
    height: 100px;
    width: 100px;
    background-color: #000;
  }

  div.board-grid {
    height: 800px;
    width: 800px;
    box-sizing: border-box;
    border: 1px solid #000;
    margin: 0 auto;
  }

  div.board-row {
    height: 100px;
    width: 800px;
    display: flex;
  }

  p.column-letter {
  }

</style>

<div id="board-gird">
  @foreach ((int i, int i_index) in orderedNumbers.Select((n, index) => (n, index)))
  {
    <div id="row-@i" class="board-row">
      @foreach ((int j, int j_index) in orderedNumbers.Select((n, index) => (n, index)))
      {
        @* NOTE: produces an offset for the board colors                  [             ] *@
        <div id="col-@j" class="board-column color-@(int.IsEvenInteger(j + (1 * (i % 2))) ? "black" : "white")">
          @if (j_index == 0)
          {
            <p class="row-number" style="color: @(int.IsEvenInteger(j + (1 * (i % 2))) ? "white" : "black");">@i</p>
          }
          @if (i_index == orderedNumbers.Count() - 1)
          {
            <p class="column-letter" style="color: @(int.IsEvenInteger(j + (1 * (i % 2))) ? "white" : "black");">@letters[8 - j]</p>
          }
        </div>
      }
    </div>
  }
</div>

@code {

  //NOTE: these are both seen from whites side, and will be fliped if the need to display blacks side
  //      pops up
  string letters = "ABCDEFGH";
  IEnumerable<int> orderedNumbers = [ 8, 7, 6, 5, 4, 3, 2, 1 ];

  [Parameter]
  public required Sets Set { get; set; }

  protected override async Task OnInitializedAsync()
  {

    //NOTE: if the player is black, reverse the directions
    if (Set is Sets.Black)
      orderedNumbers = orderedNumbers.Reverse();

    StateHasChanged();

    await base.OnInitializedAsync();
  }

}
