@page "/board"

@rendermode RenderMode.InteractiveAuto

@attribute [Route(Shared.Routes.Blazor.Views.BoardView)]

<div id="board-gird">
  @for (int y = 0; y < BoardDimensions.Y; ++y)
  {
    <div id="row-@y" class="board-row">
      @for (int x = 0; x < BoardDimensions.X; ++x)
      {
        <div id="column-@x" class="board-column @GetCellColor(x, y)">
          <button @onclick="() => OnSquareClicked(x, y)">
          @if (BoardPieces.GetPiece(x, y) is not EmptyPiece)
          {
            int tmp_x = x, tmp_y = y;
              <img src="img/pieces/@GetPieceGraphic(x, y)"
                   class="chess-piece @(selectedPiece == BoardPieces.GetPiece(x, y) ? "selected" : "")" />
          }
        </button>
        else if (SquareContainsMove(x, y))
        {
          int tmp_x = x, tmp_y = y;
        }
        </div>
      }
    </div>
  }
</div>

@code {

  IEnumerable<IEnumerable<PieceBase>> BoardPieces = Array.Empty<IEnumerable<PieceBase>>();
  int[,] highlights = new int[8, 8];

  PieceBase? selectedPiece = null;

  (int X, int Y) BoardDimensions = (8, 8);

  [Parameter]
  public required Sets Set { get; set; }

  //NOTE: FEN meaning:                           Board state,whos move,castiling,En passant, Halfmove clock,Fullmove number
  private readonly string _defaultBoardLayout = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

  protected override async Task OnInitializedAsync()
  {
    BoardPieces = BoardHelpers.FENToBoard(_defaultBoardLayout, Set);

    await InvokeAsync(() => StateHasChanged());
  }

  async Task OnSquareClicked(int x, int y)
  {
    PieceBase piece = BoardPieces.GetPiece(x, y);

    //NOTE: if you click the same piece, then turn it off
    if (piece is EmptyPiece || selectedPiece == piece) {
      selectedPiece = null;
      highlights = new int[8, 8];

      await InvokeAsync(() => StateHasChanged());

      return;
    }

    selectedPiece = piece;
    highlights = PieceHelpers.GetPieceMoves(piece, x, y);

    await InvokeAsync(() => StateHasChanged());
  }

  string GetPieceGraphic(int x, int y)
  {
    PieceBase piece = BoardPieces.GetPiece(x, y);
    return BoardHelpers.GetPieceString(piece);
  }

  bool SquareContainsMove(int x, int y)
  {
    return false;
    throw new NotImplementedException();
  }

  string GetCellColor(int x, int y)
  {
    if (highlights[y,x] is not 0)
      return highlights[y, x] switch {
        1 => "color-green",
        2 => "color-red",
        _ => throw new Exception("Unreachable code"),
      };

    //NOTE: all even (index based) cells must be white, all un-even must be black
    return (x + y) % 2 == 0 ? "color-white" : "color-black";
  }
}
