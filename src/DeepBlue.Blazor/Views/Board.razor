@page "/board"

@rendermode RenderMode.InteractiveAuto

@attribute [Route(Shared.Routes.Blazor.Views.BoardView)]

@inject GameState Game

<div id="board-gird">
  @for (int y = 0; y < BoardDimensions.Y; ++y)
  {
    <div id="row-@y" class="board-row">
      @for (int x = 0; x < BoardDimensions.X; ++x)
      {
        int tmp_x = x, tmp_y = y;
        <div id="column-@x" class="board-column @GetCellColor(x, y)">
          <button class="chess-piece" @onclick="() => OnSquareClicked(tmp_x, tmp_y)">
          @if (Game.GetPiece(x, y) is not EmptyPiece)
          {
              <img src="img/pieces/@GetPieceGraphic(x, y)"
                   class="chess-piece @(Game.SelectedPiece == Game.GetPiece(x, y) ? "selected" : "")" />
          }
          </button>
        </div>
      }
    </div>
  }
</div>

@code {
  int[,] highlights = new int[8,8];

  (int X, int Y) BoardDimensions = (8, 8);

  [Parameter]
  public required Sets Set { get; set; }

  //NOTE: FEN meaning:                           Board state,whos move,castiling,En passant, Halfmove clock,Fullmove number
  private string _boardLayout = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

  protected override async Task OnInitializedAsync()
  {
    //NOTE: this is for if the game is loaded from server
    if (Game.CurrentFEN is not "")
      _boardLayout = Game.CurrentFEN;
    else
      Game.CurrentFEN = _boardLayout;

    Game.BoardPieces = BoardHelpers.FENToBoard(Game.CurrentFEN);

    await InvokeAsync(() => StateHasChanged());
  }

  async Task OnSquareClicked(int x, int y)
  {
    PieceBase piece = Game.GetPiece(x, y);

    if (Game.SelectedPiece is not null && SquareContainsMove(x, y)) {
      Game.MakeMove(x, y);
      highlights = new int[8,8];

      await InvokeAsync(() => StateHasChanged());
      return;
    }

    //NOTE: check if select and piece is same object [                    ]
    if (piece is EmptyPiece || Object.ReferenceEquals(Game.SelectedPiece, piece)) {
      highlights = new int[8,8];
      Game.SelectedPiece = null;
      await InvokeAsync(() => StateHasChanged());
      return;
    }

    highlights = piece.GetValidMoves(Game.BoardPieces);
    Game.SelectedPiece = piece;

    await InvokeAsync(() => StateHasChanged());
  }

  string GetPieceGraphic(int x, int y)
  {
    PieceBase piece = Game.GetPiece(x, y);
    return BoardHelpers.GetPieceString(piece);
  }

  bool SquareContainsMove(int x, int y)
  {
    return highlights[x, y] != 0;
  }

  string GetCellColor(int x, int y)
  {
    return highlights[x,y] switch {
      1 => "color-green",
      2 => "color-red",
      //NOTE: all even (index based) cells must be white, all un-even must be black
      _ => (x + y) % 2 == 0 ? "color-white" : "color-black",
    };
  }
}